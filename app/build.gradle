apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'AndResGuard'

android {
  compileSdkVersion 29
  buildToolsVersion "29.0.2"
  defaultConfig {
    applicationId "me.weicools.pixivmoe"
    minSdkVersion 21
    targetSdkVersion 29
    versionCode 1
    versionName "1.0"

    lintOptions {
      abortOnError false
    }

    kapt {
      correctErrorTypes = true
    }

    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
    }
  }

  buildTypes {
    debug {
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  implementation(DepLibs.KotlinLib)
  implementation(DepLibs.Gson)
  implementation(DepLibs.Dagger2)
  kapt(DepLibs.Dagger2Compiler)

  implementation(AndroidLibs.XAppCompat)
  implementation(AndroidLibs.XSupportV4)
  implementation(AndroidLibs.XMaterialDesign)
  implementation(AndroidLibs.XCardView)
  implementation(AndroidLibs.XCustomTabs)
  implementation(AndroidLibs.XConstraintLayout)

  implementation(RxLibs.RxJava2)
  implementation(RxLibs.RxAndroid2)
  implementation(RxLibs.RxDownload)
  implementation(RxLibs.RxLifecycle)
  implementation(RxLibs.RxLifecycleAndroid)
  implementation(RxLibs.RxCache2)
  implementation(RxLibs.RxCache2Json)
  implementation(RxLibs.RxPermissions2)

  implementation(NetworkLibs.Retrofit)
  implementation(NetworkLibs.RetrofitConverterGson)
  implementation(NetworkLibs.RetrofitAdapterRxJava2)

  implementation(ImageLoaderLibs.Glide)
  kapt(ImageLoaderLibs.GlideCompiler)

  implementation(WidgetLibs.PhotoView)
  implementation(WidgetLibs.FlowLayout)
  implementation(WidgetLibs.AHBottomNavigation)
  implementation(WidgetLibs.MaterialAboutLibrary)

  implementation(AnalyticLibs.Timber)
  debugImplementation(AnalyticLibs.LeakCanaryDebug)
  releaseImplementation(AnalyticLibs.LeakCanaryRelease)

  debugImplementation(AnalyticLibs.MethodTraceManDebug)
  releaseImplementation(AnalyticLibs.MethodTraceManRelease)
}

apply plugin: AnalyticLibs.MethodTraceManPluginName
traceMan {
  open = true //这里如果设置为false,则会关闭插桩
  logTraceInfo = false //这里设置为true时可以在log日志里看到所有被插桩的类和方法
  traceConfigFile = "${project.projectDir}/traceconfig.txt"
}

//andResGuard {
//  mappingFile = file("./resource_mapping.txt")
//  // mappingFile = null
//  use7zip = true
//  useSign = true
//  // It will keep the origin path of your resources when it's true
//  // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
//  keepRoot = false
//  // If set, name column in arsc those need to proguard will be kept to this value
//  // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
//  fixedResName = "arg"
//  // It will merge the duplicated resources, but don't rely on this feature too much.
//  // it's always better to remove duplicated resource from repo
//  // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
//  mergeDuplicatedRes = true
//  whiteList = [// your icon
//               "R.drawable.icon",
//               // for fabric
//               "R.string.com.crashlytics.*",
//               // for google-services
//               "R.string.google_app_id",
//               "R.string.gcm_defaultSenderId",
//               "R.string.default_web_client_id",
//               "R.string.ga_trackingId",
//               "R.string.firebase_database_url",
//               "R.string.google_api_key",
//               "R.string.google_crash_reporting_api_key"]
//  compressFilePattern = ["*.png",
//                         "*.jpg",
//                         "*.jpeg",
//                         "*.gif",]
//  sevenzip {
//    artifact = 'com.tencent.mm:SevenZip:1.2.17'
//    //path = "/usr/local/bin/7za"
//  }
//
//  /**
//   * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
//   * to the path which assemble[Task] write to
//   **/
//  // 可选： 如果不设置则会默认覆盖assemble输出的apk
//  // finalApkBackupPath = "${project.rootDir}/final.apk"
//
//  /**
//   * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
//   * Only works in V1signing, default value is "SHA-1"
//   **/
//  // 可选: 指定v1签名时生成jar文件的摘要算法 默认值为“SHA-1”, 只在V1signing下生效
//  // digestalg = "SHA-256"
//}